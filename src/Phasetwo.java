
import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Phaetwo.java
 *
 * Created on May 29, 2013, 1:06:57 PM
 */
/**
 *
 * @author Osman
 */
public class Phasetwo extends javax.swing.JFrame {

    private static HashMap<List<String>, Double> supportMap;
    JFileChooser fc = new JFileChooser();
    String filePath;
    ArrayList<String> rules = new ArrayList<String>();
    List<List<String>> rulesFinal = new ArrayList<List<String>>();
    double minSupport, confidence, correlation;
    String filePath1 = "";

    public Phasetwo(double minS, double conf, double corr, String filep) {
        initComponents();
        jButton7.setVisible(true);

        File document = new File("PN.txt");
        if (!document.exists()) {
            jButton7.setVisible(false);
        }
        jButton10.setVisible(true);

        document = new File("new_positive_border.txt");
        if (!document.exists()) {
            jButton10.setVisible(false);
        }

        list1.setMultipleMode(true);
        jLabel7.setVisible(false);
        jLabel6.setVisible(false);
        jLabel6.setVisible(false);
        jLabel9.setVisible(false);
      
        jButton2.setVisible(false);
        jButton3.setVisible(false);
        jButton4.setVisible(false);
        jButton6.setVisible(false);
        jLabel8.setVisible(false);
       
        jLabel5.setVisible(false);
        jLabel10.setVisible(false);
        minSupport = minS;
        confidence = conf;
        correlation = corr;
        filePath1 = filep;

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        list1 = new java.awt.List();
        jButton9 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jButton10 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel1.setText("A Framework for Privacy Preservation within Data Mining Systems");

        jLabel2.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        jLabel2.setText("Phase II: Protect the selected sensitive rules by the data owner");

        jLabel3.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        jLabel3.setText("Choose the rules to hide");

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton1.setText("Create positive and negative border");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton2.setText("Hiding frequent itemset ");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton3.setText("View modified dataset");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton4.setText("Extract rules and frequent itemset from modified dataset");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton6.setText("View Results");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 51, 51));
        jLabel7.setText("Finished!");

        jButton7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton7.setText("View Results");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 51, 51));
        jLabel8.setText("Finished!");

        jButton8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton8.setText("Fill Table");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton9.setText("Go to Phase I");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Rule             |        Support       |      Confidence     |       Lift       |       Correlation      |           ChiSquare     ");

        jLabel5.setText("jLabel5");

        jLabel6.setText("jLabel6");

        jLabel9.setText("jLabel9");

        jButton5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton5.setText("Create positive border");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 51, 51));
        jLabel10.setText("Finished!");

        jButton10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton10.setText("View Results");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(218, 218, 218)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jButton9)
                .addGap(25, 25, 25))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 434, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 759, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton4)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8)
                                .addGap(73, 73, 73)
                                .addComponent(jButton6))
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel9)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton1)
                                    .addComponent(jButton5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel10))
                                .addGap(201, 201, 201)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton10)
                                    .addComponent(jButton7))))
                        .addGap(108, 108, 108)))
                .addGap(58, 58, 58))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(list1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(58, 58, 58))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton9))
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jButton8))
                .addGap(27, 27, 27)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(list1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7)
                    .addComponent(jButton1)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jLabel10)
                    .addComponent(jButton10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton6)
                    .addComponent(jLabel8))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        String content = "";
        try {
            content = new Scanner(new File("r-rules.txt")).useDelimiter("\\Z").next();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Phasetwo.class.getName()).log(Level.SEVERE, null, ex);
        }
        content = content.substring(content.lastIndexOf("----------------- Assosciation Rules---------------------") + 1, content.length() - 1);
        content = content.substring(content.indexOf("\n") + 1, content.lastIndexOf("\n"));
        String[] strLine = new String[2];
        String[] content2 = content.split("\n");
        for (int k = 0; k < content2.length - 1; k = k + 2) {
            strLine[0] = content2[k];
            strLine[1] = content2[k + 1];
            String temp1 = strLine[0] + " " + strLine[1];
            rules.add(temp1);
        }
        for (int i = 0; i < rules.size(); i++) {
            list1.add(rules.get(i));
        }
    }//GEN-LAST:event_jButton8ActionPerformed
    public static List<List<String>> readInputFile(String filep) {
        return ParseInputFile(filep);
    }

    public static List<List<String>> ParseInputFile(String filePath) {
        supportMap = new HashMap<List<String>, Double>();
        ArrayList<List<String>> f = new ArrayList<List<String>>();
        FileInputStream fstream;
        try {
            fstream = new FileInputStream(filePath);
            DataInputStream in = new DataInputStream(fstream);
            BufferedReader br = new BufferedReader(new InputStreamReader(in));
            String line = null;
            while ((line = br.readLine()) != null
                    && line.indexOf("Assosciation Rules") < 0) {
                if (line.startsWith("---------")
                        || line.startsWith("Min Support")) {
                    continue;
                }
                String item = line.split("\\s\\s")[0];
                List<String> itemList = Arrays.asList(item.split(","));
                Collections.sort(itemList);
                f.add(itemList);

                String supportString = line.split("\\s=\\s\\s")[1];
                double support = Double.parseDouble(supportString.split("%")[0]);
                supportMap.put(itemList, support);
            }
            return f;
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    public List<List<String>> reduceList(List<List<String>> frequentItems) {
        boolean viewInputDialog = true;
        List<List<String>> removedItems = new ArrayList<List<String>>();
        // String itemsString = null;
        while (viewInputDialog) {
            //JOptionPane.showInputDialog("Enter items to be removed from the list(separated by a space)");
            viewInputDialog = false;
            LinkedHashSet<List<String>> deleteItemsHashSet = new LinkedHashSet<List<String>>();
            for (int i = 0; i < rulesFinal.size(); i++) {
                deleteItemsHashSet.add(rulesFinal.get(i));
            }
            LinkedHashSet<List<String>> tempDeleteItemsList = new LinkedHashSet<List<String>>(
                    deleteItemsHashSet);
            for (List<String> item : tempDeleteItemsList) {
                Collections.sort(item);
                if (frequentItems.contains(item)) {
                    for (List<String> superItem : frequentItems) {
                        if (PNUtilities.isSubset(item, superItem)) {
                            deleteItemsHashSet.add(superItem);
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Wrong input Data",
                            "Data validation error",
                            JOptionPane.ERROR_MESSAGE);
                    viewInputDialog = true;
                    break;
                }
            }
            if (!viewInputDialog) {
                frequentItems.removeAll(deleteItemsHashSet);
            }
            removedItems = new ArrayList<List<String>>(deleteItemsHashSet);

        }
        return removedItems;
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        long startTime = System.currentTimeMillis();
        DateFormat dateFormat = new SimpleDateFormat("HH:mm:ss.SSS");
        Calendar cal = Calendar.getInstance();
        jLabel5.setText("Start Time: " + dateFormat.format(cal.getTime()) + "");


        String[] selectedRules = list1.getSelectedItems();
        for (int i = 0; i < selectedRules.length; i++) {
            selectedRules[i] = selectedRules[i].substring(selectedRules[i].indexOf("["), selectedRules[i].lastIndexOf("]") + 1);
            String temp1 = selectedRules[i].substring(selectedRules[i].indexOf("[") + 1, selectedRules[i].indexOf("]"));
            temp1 = temp1.replaceAll("\\s", "");
            String temp2 = selectedRules[i].substring(selectedRules[i].lastIndexOf("[") + 1, selectedRules[i].lastIndexOf("]"));
            temp2 = temp2.replaceAll("\\s", "");
            String[] temp11 = temp1.split(",");
            String[] temp22 = temp2.split(",");
            List<String> temp = new ArrayList<String>();
            for (int ii = 0; ii < temp11.length; ii++) {
                temp.add(temp11[ii]);
            }
            for (int ii = 0; ii < temp22.length; ii++) {
                temp.add(temp22[ii]);
            }
            rulesFinal.add(temp);
        }
        //============================================
        List<List<String>> frequentItems = new ArrayList<List<String>>();
        try {
            frequentItems = readInputFile("a-rules.txt");
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Input file first",
                    "Input file first",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        // C:\Users\Essam\Desktop\test2.txt
        String output = "";
        output += "****** F:" + "\n";
        for (List<String> itemList : frequentItems) {
            int size = itemList.size();
            for (int i = 0; i < size; i++) {
                output += itemList.get(i);
                if (i == size - 1) {
                    output += "\n";
                } else {
                    output += ", ";
                }
            }
        }
        output += "****** F':" + "\n";
        List<List<String>> removedItems = reduceList(frequentItems);

        for (List<String> itemList : frequentItems) {
            int size = itemList.size();
            for (int i = 0; i < size; i++) {
                output += itemList.get(i);
                if (i == size - 1) {
                    output += "\n";
                } else {
                    output += ", ";
                }
            }
        }
        Borders borders = new Borders(frequentItems, removedItems);
        List<List<String>> positiveBorders = borders.getPositiveBorders();
        output += "****** Positive Borders:" + "\n";
        for (List<String> itemList : positiveBorders) {
            int size = itemList.size();
            for (int i = 0; i < size; i++) {
                output += itemList.get(i);
                if (i == size - 1) {
                    output += "\n";
                } else {
                    output += ", ";
                }
            }
        }
        List<List<String>> negativeBorders = borders.getNegativeBorders();
        output += "****** Negative Borders:" + "\n";
        for (List<String> itemList : negativeBorders) {
            int size = itemList.size();
            for (int i = 0; i < size; i++) {
                output += itemList.get(i);
                if (i == size - 1) {
                    output += "\n";
                } else {
                    output += ", ";
                }
            }
        }
        System.out.println(output);
        FileWriter fstream;
        try {
            fstream = new FileWriter("PN.txt");
            BufferedWriter out = new BufferedWriter(fstream);
            out.write(output);
            out.close();
            fstream.close();
        } catch (IOException e) {
            //
            e.printStackTrace();
        }
        long endTime = System.currentTimeMillis();
        cal = Calendar.getInstance();
        jLabel6.setText("End Time: " + dateFormat.format(cal.getTime()) + "");
        double duration1 = (endTime - startTime) / 1000.0;
        jLabel9.setText(duration1 + " seconds");
        //============================================
        jLabel7.setVisible(true);
        jLabel5.setVisible(true);
        jLabel6.setVisible(true);
        jLabel9.setVisible(true);
        jButton7.setVisible(true);
        jButton2.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        try {
            File document = new File("PN.txt");
            Desktop dt = Desktop.getDesktop();
            dt.open(document);

        } catch (IOException ex) {
            Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jButton3.setVisible(true);
        jButton4.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        jButton6.setVisible(true);
        jLabel8.setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        this.setVisible(false);
        new Frame(minSupport, confidence, correlation, filePath1).setVisible(true);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        //Essam
        rulesFinal = new ArrayList<List<String>>();
        long startTime = System.currentTimeMillis();
        DateFormat dateFormat = new SimpleDateFormat("HH:mm:ss.SSS");
        Calendar cal = Calendar.getInstance();
        jLabel5.setText("Start Time: " + dateFormat.format(cal.getTime()) + "");


        String[] selectedRules = list1.getSelectedItems();
        for (int i = 0; i < selectedRules.length; i++) {
            selectedRules[i] = selectedRules[i].substring(selectedRules[i].indexOf("["), selectedRules[i].lastIndexOf("]") + 1);
            String temp1 = selectedRules[i].substring(selectedRules[i].indexOf("[") + 1, selectedRules[i].indexOf("]"));
            temp1 = temp1.replaceAll("\\s", "");
            String temp2 = selectedRules[i].substring(selectedRules[i].lastIndexOf("[") + 1, selectedRules[i].lastIndexOf("]"));
            temp2 = temp2.replaceAll("\\s", "");
            String[] temp11 = temp1.split(",");
            String[] temp22 = temp2.split(",");
            List<String> temp = new ArrayList<String>();
            for (int ii = 0; ii < temp11.length; ii++) {
                temp.add(temp11[ii]);
            }
            for (int ii = 0; ii < temp22.length; ii++) {
                temp.add(temp22[ii]);
            }
            rulesFinal.add(temp);
        }
        rulesFinal = getActualSensitiveSets(rulesFinal);
        //============================================
        List<List<String>> frequentItems = new ArrayList<List<String>>();
        try {
            frequentItems = readInputFile("a-rules.txt");
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Input file first",
                    "Input file first",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        // C:\Users\Essam\Desktop\test2.txt
        String output = "";

        output += "****** Sensitive item sets:" + "\n";
        for (List<String> itemList : rulesFinal) {
            int size = itemList.size();
            Collections.sort(itemList);
            for (int i = 0; i < size; i++) {
                output += itemList.get(i);
                if (i != size - 1) {
                    output += ", ";
                }
            }
            output += "[Support =  " + supportMap.get(itemList) + "% ]";
            output += "\n";

        }

        output += "****** F:" + "\n";
        for (List<String> itemList : frequentItems) {
            int size = itemList.size();
            for (int i = 0; i < size; i++) {
                output += itemList.get(i);
                if (i == size - 1) {
                    output += "\n";
                } else {
                    output += ", ";
                }
            }
        }
        output += "****** F':" + "\n";
        List<List<String>> removedItems = reduceList(frequentItems);

        for (List<String> itemList : frequentItems) {
            int size = itemList.size();
            for (int i = 0; i < size; i++) {
                output += itemList.get(i);
                if (i == size - 1) {
                    output += "\n";
                } else {
                    output += ", ";
                }
            }
        }
        Borders borders = new Borders(frequentItems, removedItems);
        List<List<String>> positiveBorders = borders.getPositiveBorders();
        output += "****** Positive Borders:" + "\n";
        for (List<String> itemList : positiveBorders) {

            int size = itemList.size();
            for (int i = 0; i < size; i++) {
                output += itemList.get(i);
                if (i != size - 1) {
                    output += ", ";
                }
            }
            output += "[Support =  " + supportMap.get(itemList) + "% ]";
            output += "\n";
        }

        System.out.println(output);
        FileWriter fstream;
        try {
            fstream = new FileWriter("new_positive_border.txt");
            BufferedWriter out = new BufferedWriter(fstream);
            out.write(output);
            out.close();
            fstream.close();
        } catch (IOException e) {
            //
            e.printStackTrace();
        }
        long endTime = System.currentTimeMillis();
        cal = Calendar.getInstance();
        jLabel6.setText("End Time: " + dateFormat.format(cal.getTime()) + "");
        double duration1 = (endTime - startTime) / 1000.0;
        jLabel9.setText(duration1 + " seconds");
        //============================================
        jLabel7.setVisible(false);
        jLabel10.setVisible(true);
        jLabel5.setVisible(true);
        jLabel6.setVisible(true);
        jLabel9.setVisible(true);
        jButton10.setVisible(true);
        jButton2.setVisible(true);

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        try {
            File document = new File("new_positive_border.txt");
            Desktop dt = Desktop.getDesktop();
            dt.open(document);

        } catch (IOException ex) {
            Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed
    /**
     * @param args the command line arguments
     */
    /* public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {
    public void run() {
    new Phasetwo().setVisible(true);
    }
    });
    }*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private java.awt.List list1;
    // End of variables declaration//GEN-END:variables

    private List<List<String>> getActualSensitiveSets(List<List<String>> rulesFinal) {
        List<List<String>> newRulesFinal = new LinkedList<List<String>>(rulesFinal);

        class CompareWithLength implements Comparator<List<String>> {
            /*
             * (non-Javadoc)
             * 
             * @see java.util.Comparator#compare(java.lang.Object,
             * java.lang.Object)
             */

            @Override
            public int compare(List<String> o1, List<String> o2) {
                int compVal;
                if (o1.size() < o2.size()) {
                    compVal = -1;
                } else if (o1.size() == o2.size()) {
                    compVal = 0;
                } else {
                    compVal = 1;
                }
                return compVal;
            }
        }

        Collections.sort(newRulesFinal, new CompareWithLength());
        int rulesNumber = newRulesFinal.size();
        HashSet<List<String>> deletedItems = new HashSet<List<String>>();
        for (int i = 0; i < rulesNumber - 1; i++) {
            for (int j = i + 1; j < rulesNumber; j++) {
                if (PNUtilities.isSubset(newRulesFinal.get(i), newRulesFinal.get(j))) {
                    deletedItems.add(newRulesFinal.get(j));
                }
            }
        }
        newRulesFinal.removeAll(deletedItems);
        return newRulesFinal;
    }
}
